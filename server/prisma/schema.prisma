// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  phoneNumber     String        @unique
  isPhoneVerified Boolean       @default(false) 
  email           String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userDetails     UserDetails[]  
  userOtp         UserOtp?      
}
model UserOtp {
  id          Int       @id @default(autoincrement())
  otp         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum OAuthUserProvider {
  GOOGLE
  LINKEDIN
}

model OAuthUser {
  id                 Int                @id @default(autoincrement())
  type               OAuthUserProvider
  email              String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userDetails        UserDetails[]
}

enum AuthType {
  LOCAL
  OAUTH
}

model UserDetails {
  id          Int       @id @default(autoincrement())
  authType    AuthType
  username    String    @unique
  fullname    String  
  dateOfBirth DateTime?
  isOnboarded Boolean   @default(false) 
  sector      String?
  occupation  String?
  userId      Int?
  oAuthUserId Int? 
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  oAuthUser   OAuthUser?      @relation(fields: [oAuthUserId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Session {
  id            Int       @id @default(autoincrement())
  expiringTime  DateTime  
  userId        Int
  ip            String
  authType      AuthType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}




