// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}



model User {
  id              Int           @id @default(autoincrement())
  phoneNumber     String        @unique
  email           String        @unique
  isPhoneVerified Boolean       @default(false) 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userDetails     UserDetails?  // One-to-one relation
  sessions        Session[]     // One-to-many relation
  userOtp         UserOtp?      // One-to-one relation
}

enum OAuthUserType {
  google
  linkedin
}

model OAuthUser {
  id                 Int                @id @default(autoincrement())
  type               OAuthUserType
  email              String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  oAuthUserDetails   OAuthUserDetails?  // One-to-one relation
  sessions           Session[]          // One-to-many relation
}

// username to be generated and added
model OAuthUserDetails {
  id            Int        @id @default(autoincrement())
  fullname      String 
  oAuthUserId   Int        @unique
  oAuthUser     OAuthUser  @relation(fields: [oAuthUserId], references: [id], onDelete: Cascade)
}

model UserDetails {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  fullname    String
  dateOfBirth DateTime
  sector      String
  occupation  String
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id            Int       @id @default(autoincrement())
  userId        Int
  oAuthUserId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  oAuthUser     OAuthUser @relation(fields: [oAuthUserId], references: [id], onDelete: Cascade)
}

model UserOtp {
  id          Int       @id @default(autoincrement())
  otp         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
